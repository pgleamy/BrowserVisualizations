const canvas=document.getElementById("gameCanvas");const ctx=canvas.getContext("2d");canvas.width=window.innerWidth;canvas.height=window.innerHeight;const ASTEROID_SIZES={LARGE:{radius:40,children:2},MEDIUM:{radius:20,children:2},SMALL:{radius:10,children:0}};let keysPressed={};class Ship{constructor(x,y){this.x=x;this.y=y;this.angle=0;this.radius=15;this.bullets=[];this.velX=0;this.velY=0;this.rotation=0;this.thrust=false;this.respawnSafe=false;this.lastShotTime=0;this.shootCooldown=200;this.thrustSpeed=.05;this.maxSpeed=4;this.thrustAlpha=0;this.targetThrustAlpha=0;this.alphaTransitionSpeed=.045;this.thrustSoundPlaying=false}draw(ctx){ctx.save();ctx.translate(this.x,this.y);ctx.rotate(this.angle);ctx.strokeStyle=this.respawnSafe?"green":"white";ctx.beginPath();ctx.moveTo(0,-this.radius*.75);ctx.lineTo(this.radius*.6,this.radius);ctx.lineTo(this.radius*.3,this.radius*.8);ctx.lineTo(-this.radius*.3,this.radius*.8);ctx.lineTo(-this.radius*.6,this.radius);ctx.closePath();ctx.stroke();if(this.thrust){ctx.fillStyle="red";ctx.globalAlpha=this.thrustAlpha;ctx.beginPath();ctx.moveTo(0,this.radius);ctx.lineTo(-this.radius*.4,this.radius+this.radius*.5);ctx.lineTo(this.radius*.4,this.radius+this.radius*.5);ctx.closePath();ctx.fill();ctx.globalAlpha=1}ctx.restore()}update(asteroids){this.angle+=this.rotation;if(this.thrust){this.velX+=Math.cos(this.angle-Math.PI/2)*this.thrustSpeed;this.velY+=Math.sin(this.angle-Math.PI/2)*this.thrustSpeed;const speed=Math.sqrt(this.velX*this.velX+this.velY*this.velY);if(speed>this.maxSpeed){this.velX*=this.maxSpeed/speed;this.velY*=this.maxSpeed/speed}this.targetThrustAlpha=1}else{this.velX*=.995;this.velY*=.995;this.targetThrustAlpha=0}if(this.thrustAlpha<this.targetThrustAlpha){this.thrustAlpha+=this.alphaTransitionSpeed;if(this.thrustAlpha>this.targetThrustAlpha){this.thrustAlpha=this.targetThrustAlpha}}else if(this.thrustAlpha>this.targetThrustAlpha){this.thrustAlpha-=this.alphaTransitionSpeed;if(this.thrustAlpha<this.targetThrustAlpha){this.thrustAlpha=this.targetThrustAlpha}}if(this.thrust&&!this.thrustSoundPlaying){soundEffects.play("thrust");this.thrustSoundPlaying=true}else if(!this.thrust&&this.thrustSoundPlaying){soundEffects.stop("thrust");this.thrustSoundPlaying=false}this.x+=this.velX;this.y+=this.velY;if(this.x<0)this.x=canvas.width;if(this.x>canvas.width)this.x=0;if(this.y<0)this.y=canvas.height;if(this.y>canvas.height)this.y=0;this.bullets.forEach(((bullet,i)=>{bullet.update();if(bullet.x<0||bullet.x>canvas.width||bullet.y<0||bullet.y>canvas.height){this.bullets.splice(i,1)}}));if(this.respawnSafe){let allAsteroidsFar=true;for(let asteroid of asteroids){const dx=this.x-asteroid.x;const dy=this.y-asteroid.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<this.safeDistance){allAsteroidsFar=false;break}}if(allAsteroidsFar){this.respawnSafe=false}}}shoot(){const now=performance.now();if(now-this.lastShotTime>=this.shootCooldown){const bulletX=this.x+Math.cos(this.angle-Math.PI/2)*this.radius;const bulletY=this.y+Math.sin(this.angle-Math.PI/2)*this.radius;this.bullets.push(new Bullet(bulletX,bulletY,this.angle-Math.PI/2));this.lastShotTime=now;soundEffects.play("shoot")}}explode(){soundEffects.play("bangSmall");const fragments=[];for(let i=0;i<10;i++){const angle=Math.random()*Math.PI*2;fragments.push(new Fragment(this.x,this.y,angle))}return fragments}}class Bullet{constructor(x,y,angle){this.x=x;this.y=y;this.angle=angle}draw(ctx){ctx.fillStyle="white";ctx.beginPath();ctx.arc(this.x,this.y,2,0,Math.PI*2);ctx.fill()}update(){this.x+=Math.cos(this.angle)*4;this.y+=Math.sin(this.angle)*4}}class Fragment{constructor(x,y,angle){this.x=x;this.y=y;this.angle=angle;this.speed=Math.random()*2+1;this.lifetime=2}draw(ctx){ctx.strokeStyle="white";ctx.beginPath();ctx.moveTo(this.x,this.y);ctx.lineTo(this.x+Math.cos(this.angle)*10,this.y+Math.sin(this.angle)*10);ctx.stroke()}update(deltaTime){this.x+=Math.cos(this.angle)*this.speed;this.y+=Math.sin(this.angle)*this.speed;this.lifetime-=deltaTime}}class Asteroid{constructor(x,y,size,speed,angle){this.x=x;this.y=y;this.size=size;this.radius=ASTEROID_SIZES[size].radius;this.speed=speed;this.angle=angle;this.points=this.generatePoints()}generatePoints(){const points=[];const numPoints=10;for(let i=0;i<numPoints;i++){const angle=i/numPoints*Math.PI*2;const radius=this.radius+Math.random()*this.radius*.5-this.radius*.25;points.push({x:Math.cos(angle)*radius,y:Math.sin(angle)*radius})}return points}draw(ctx){ctx.strokeStyle="white";ctx.beginPath();ctx.moveTo(this.x+this.points[0].x,this.y+this.points[0].y);for(let i=1;i<this.points.length;i++){ctx.lineTo(this.x+this.points[i].x,this.y+this.points[i].y)}ctx.closePath();ctx.stroke()}update(){this.x+=Math.cos(this.angle)*this.speed;this.y+=Math.sin(this.angle)*this.speed;if(this.x<0)this.x=canvas.width;if(this.x>canvas.width)this.x=0;if(this.y<0)this.y=canvas.height;if(this.y>canvas.height)this.y=0}breakApart(){if(this.size==="LARGE"){soundEffects.play("bangLarge")}else if(this.size==="MEDIUM"){soundEffects.play("bangMedium")}else if(this.size==="SMALL"){soundEffects.play("bangSmall")}const children=[];const newSize=this.size==="LARGE"?"MEDIUM":"SMALL";if(ASTEROID_SIZES[newSize]){for(let i=0;i<ASTEROID_SIZES[this.size].children;i++){const angle=Math.random()*Math.PI*2;const speed=(.2+Math.random())*this.speed;children.push(new Asteroid(this.x,this.y,newSize,speed,angle))}}return children}}class AsteroidMonitor{constructor(){this.initialTotalAsteroids=0;this.remainingAsteroids=0}initialize(asteroids){this.initialTotalAsteroids=this.calculateTotalAsteroids(asteroids);this.remainingAsteroids=this.initialTotalAsteroids}calculateTotalAsteroids(asteroids){let total=0;asteroids.forEach((asteroid=>{total+=this.countAsteroidAndChildren(asteroid.size)}));return total}countAsteroidAndChildren(size){if(size==="LARGE"){return 7}else if(size==="MEDIUM"){return 3}else if(size==="SMALL"){return 1}return 0}updateRemainingAsteroids(asteroids){this.remainingAsteroids=asteroids.reduce(((total,asteroid)=>total+this.countAsteroidAndChildren(asteroid.size)),0)}getRemainingProportion(){if(this.initialTotalAsteroids===0)return 0;return this.remainingAsteroids/this.initialTotalAsteroids}}class LevelManager{constructor(){this.currentLevel=1;this.asteroidsPerLevel=4;this.speedMultiplier=1}nextLevel(){this.currentLevel++;this.asteroidsPerLevel+=1;if(this.asteroidsPerLevel==13)this.asteroidPerLevel=12;this.speedMultiplier+=.1}getAsteroids(){const asteroids=[];const shipX=canvas.width/2;const shipY=canvas.height/2;const minDistance=200;for(let i=0;i<this.asteroidsPerLevel;i++){let x,y,distance;do{x=Math.random()*canvas.width;y=Math.random()*canvas.height;const dx=x-shipX;const dy=y-shipY;distance=Math.sqrt(dx*dx+dy*dy)}while(distance<minDistance);const angle=Math.random()*Math.PI*2;const speed=(.5+Math.random())*this.speedMultiplier;asteroids.push(new Asteroid(x,y,"LARGE",speed,angle))}return asteroids}}class CollisionDetection{static checkCollision(ship,asteroids){for(let asteroid of asteroids){const dx=ship.x-asteroid.x;const dy=ship.y-asteroid.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<ship.radius+asteroid.radius){return asteroid}}return null}static checkBulletCollision(bullets,asteroids){for(let bullet of bullets){for(let asteroid of asteroids){const dx=bullet.x-asteroid.x;const dy=bullet.y-asteroid.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<asteroid.radius){return{bullet:bullet,asteroid:asteroid}}}}return null}}class HUD{constructor(){this.score=0;this.lives=4;this.extraLifeScore=2e4;this.nextExtraLife=this.extraLifeScore}draw(ctx,shipRadius,currentLevel){ctx.fillStyle="white";ctx.font="30px Arial";ctx.fillText(`LEVEL ${currentLevel}: ${this.score}`,10,35);const spacing=1.3*shipRadius;for(let i=0;i<this.lives;i++){ctx.save();ctx.translate(20+i*spacing,60);ctx.rotate(0);ctx.strokeStyle="white";ctx.beginPath();ctx.moveTo(0,-shipRadius*.75);ctx.lineTo(shipRadius*.6,shipRadius);ctx.lineTo(shipRadius*.3,shipRadius*.8);ctx.lineTo(-shipRadius*.3,shipRadius*.8);ctx.lineTo(-shipRadius*.6,shipRadius);ctx.closePath();ctx.stroke();ctx.restore()}}updateScore(points){this.score+=points;if(this.score>=this.nextExtraLife){soundEffects.play("extraShip");this.lives++;this.nextExtraLife+=this.extraLifeScore;soundEffects.play("extraShip")}}}class Game{constructor(ctx){this.ctx=ctx;this.ship=new Ship(canvas.width/2,canvas.height/2);this.levelManager=new LevelManager;this.asteroids=this.levelManager.getAsteroids();this.hud=new HUD;this.fragments=[];this.exploding=false;this.explodeTime=0;this.respawnDelay=3;this.safeDistance=100;this.safeUntil=performance.now()+this.respawnDelay*1e3;this.ship.respawnSafe=true;this.ship.safeDistance=this.safeDistance;this.asteroidMonitor=new AsteroidMonitor;this.asteroidMonitor.initialize(this.asteroids);document.getElementById("startButton").addEventListener("click",(()=>{document.getElementById("startScreen").style.display="none";soundEffects.playBeats(this.asteroidMonitor);gameLoop()}))}update(deltaTime){this.asteroids.forEach((asteroid=>asteroid.update()));this.asteroidMonitor.updateRemainingAsteroids(this.asteroids);const remainingProportion=this.asteroidMonitor.getRemainingProportion();if(this.exploding){this.explodeTime-=deltaTime;this.fragments.forEach((fragment=>fragment.update(deltaTime)));if(this.explodeTime<=0){this.exploding=false;this.respawnShip()}}else{this.ship.update(this.asteroids);if(!this.ship.respawnSafe){const collision=CollisionDetection.checkCollision(this.ship,this.asteroids);if(collision){this.fragments=this.ship.explode();this.exploding=true;this.explodeTime=2;this.hud.lives--;if(this.hud.lives===0){alert("Game Over");document.location.reload()}}}const bulletCollision=CollisionDetection.checkBulletCollision(this.ship.bullets,this.asteroids);if(bulletCollision){this.ship.bullets.splice(this.ship.bullets.indexOf(bulletCollision.bullet),1);const children=bulletCollision.asteroid.breakApart();this.asteroids.splice(this.asteroids.indexOf(bulletCollision.asteroid),1,...children);const size=bulletCollision.asteroid.size;const points=size==="LARGE"?100:size==="MEDIUM"?150:200;this.hud.updateScore(points);this.asteroidMonitor.updateRemainingAsteroids(this.asteroids)}if(this.asteroids.length===0){this.levelManager.nextLevel();this.asteroids=this.levelManager.getAsteroids();this.asteroidMonitor.initialize(this.asteroids);soundEffects.playBeats(this.asteroidMonitor)}}}draw(){this.ctx.clearRect(0,0,canvas.width,canvas.height);this.asteroids.forEach((asteroid=>asteroid.draw(this.ctx)));if(this.exploding){this.fragments.forEach((fragment=>fragment.draw(this.ctx)))}else{this.ship.draw(this.ctx)}this.ship.bullets.forEach((bullet=>bullet.draw(this.ctx)));this.hud.draw(this.ctx,this.ship.radius,this.levelManager.currentLevel)}async respawnShip(){soundEffects.play("extraShip");soundEffects.playBeats(this.asteroidMonitor);let safe=false;let attempts=0;const maxAttempts=500;while(!safe&&attempts<maxAttempts){this.ship=new Ship(canvas.width/2,canvas.height/2);this.ship.angle=0;this.ship.respawnSafe=true;this.ship.safeDistance=this.safeDistance;safe=true;for(let asteroid of this.asteroids){const dx=this.ship.x-asteroid.x;const dy=this.ship.y-asteroid.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<this.safeDistance){safe=false;await sleep(200);break}}attempts++}if(attempts>=maxAttempts){console.error("Failed to find a safe respawn location after maximum attempts")}this.safeUntil=performance.now()+this.respawnDelay*1e3;setTimeout((()=>{this.ship.respawnSafe=false}),this.respawnDelay*1e3)}}function sleep(ms){return new Promise((resolve=>setTimeout(resolve,ms)))}class SoundEffects{constructor(){this.sounds={bangLarge:new Audio("bangLarge.wav"),bangMedium:new Audio("bangMedium.wav"),bangSmall:new Audio("bangSmall.wav"),shoot:new Audio("shoot.wav"),thrust:new Audio("thrust.wav"),beat1:new Audio("beat1.wav"),beat2:new Audio("beat2.wav"),extraShip:new Audio("extraShip.wav")};for(const[key,sound]of Object.entries(this.sounds)){sound.addEventListener("canplaythrough",(()=>{switch(key){case"bangLarge":case"bangMedium":case"bangSmall":sound.volume=.8;break;case"shoot":sound.volume=.1;break;case"thrust":sound.volume=.6;break;case"beat1":sound.volume=1;break;case"beat2":sound.volume=.6;break;case"extraShip":sound.volume=.2;break}}));sound.addEventListener("error",(()=>{console.error(`Failed to load sound: ${key}`)}))}this.beatTimeout=null}play(soundName){const sound=this.sounds[soundName];if(sound){sound.currentTime=0;sound.play()}}stop(soundName){const sound=this.sounds[soundName];if(sound){sound.pause();sound.currentTime=0}}playBeats(asteroidMonitor){this.stopBeats();const playNextBeat=()=>{const remainingProportion=asteroidMonitor.getRemainingProportion();const interval=200+1200*remainingProportion;const currentBeat=this.beatTimeout%2===0?"beat1":"beat2";this.play(currentBeat);this.beatTimeout++;this.beatTimeout=setTimeout(playNextBeat,interval)};this.beatTimeout=0;playNextBeat()}stopBeats(){if(this.beatTimeout){clearTimeout(this.beatTimeout)}this.beatTimeout=null}}const soundEffects=new SoundEffects;const game=new Game(ctx);let lastTime=performance.now();function gameLoop(timestamp){const deltaTime=(timestamp-lastTime)/1e3;lastTime=timestamp;game.update(deltaTime);game.draw();requestAnimationFrame(gameLoop)}window.addEventListener("keydown",(e=>{keysPressed[e.key]=true}));window.addEventListener("keyup",(e=>{keysPressed[e.key]=false}));function handleKeyPresses(){if(keysPressed["ArrowUp"])game.ship.thrust=true;else game.ship.thrust=false;if(keysPressed["ArrowLeft"])game.ship.rotation=-.035;else if(keysPressed["ArrowRight"])game.ship.rotation=.035;else game.ship.rotation=0;if(keysPressed[" "])game.ship.shoot()}setInterval(handleKeyPresses,1e3/60);